{"version":3,"sources":["components/search.js","components/header.js","components/moreInfo.js","components/movie.js","components/App.js","serviceWorker.js","index.js"],"names":["Search","props","useState","searchValue","setSearchValue","className","type","onChange","e","target","value","onClick","preventDefault","search","Header","text","MoreInfo","isHovering","movie","Title","Plot","Runtime","Ratings","map","rating","i","key","Source","Value","Movie","setIsHovering","handleMouseHover","poster","Poster","onMouseEnter","onMouseLeave","width","alt","src","Year","initialState","loading","movies","errorMessage","reducer","state","action","payload","Error","App","useReducer","dispatch","useEffect","fetch","then","response","json","jsonResponse","forEach","getMovieData","imdbID","Response","index","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qQA4BeA,MA1Bf,SAAgBC,GAAQ,IAAD,EACgBC,mBAAS,IADzB,mBACdC,EADc,KACFC,EADE,KAerB,OACE,0BAAMC,UAAU,UACd,2BAAOC,KAAK,OACZC,SAf6B,SAACC,GAChCJ,EAAeI,EAAEC,OAAOC,QAetBA,MAASP,IAET,2BAAOG,KAAK,SAASK,QAZE,SAACH,GAC1BA,EAAEI,iBACFX,EAAMY,OAAOV,GAJcC,EAAe,KAcUM,MAAM,aCX/CI,MATf,SAAgBb,GACd,OACE,4BAAQI,UAAU,cAChB,4BAAKJ,EAAMc,MACX,kBAAC,EAAD,CAAQF,OAAQZ,EAAMY,WCSbG,MAdf,SAAkBf,GAAQ,IAChBgB,EAAsBhB,EAAtBgB,WAAYC,EAAUjB,EAAViB,MAEpB,OAAOD,EACL,yBAAKZ,UAAU,aACb,4BAAKa,EAAMC,OACX,2BAAID,EAAME,MACV,6BACA,uCAAaF,EAAMG,SAClBH,EAAMI,QAAQC,KAAI,SAACC,EAAQC,GAAT,OAAe,uBAAGC,IAAG,UAAKD,EAAL,QAAcD,EAAOG,OAA3B,KAAqCH,EAAOI,WAE9E,MCsBSC,MA5Bf,YAAyB,IAARX,EAAO,EAAPA,MAAO,EACchB,oBAAS,GADvB,mBACfe,EADe,KACHa,EADG,KAGhBC,EAAmB,WACvBD,GAAeb,IAGXe,EAAyB,QAAhBd,EAAMe,OATvB,4FASoEf,EAAMe,OACxE,OACE,yBACA5B,UAAU,QACV6B,aAAcH,EACdI,aAAeJ,GAEb,4BAAKb,EAAMC,OACX,6BACE,yBACEiB,MAAM,MACNC,IAAG,4BAAuBnB,EAAMC,OAChCmB,IAAKN,KAGT,2BAAId,EAAMqB,MACV,kBAAC,EAAD,CAAUtB,WAAYA,EAAYC,MAAOA,MCvBzCsB,EAAe,CACnBC,SAAS,EACTC,OAAQ,GACRC,aAAc,MAGVC,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOxC,MACb,IAAK,wBACH,OAAO,eACFuC,EADL,CAEEJ,SAAS,EACTE,aAAc,OAElB,IAAK,wBACH,OAAO,eACFE,EADL,CAEEJ,SAAS,EACTC,OAAQI,EAAOC,UAEnB,IAAK,wBACH,OAAO,eACFF,EADL,CAEEJ,SAAS,EACTE,aAAcG,EAAOE,QAEzB,QACE,OAAOH,IA4EEI,MAxEf,WAAgB,IAAD,EACaC,qBAAWN,EAASJ,GADjC,mBACNK,EADM,KACCM,EADD,KAGbC,qBAAU,WACRC,MArCkB,mDAsCfC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJA,EAAazD,OAAO0D,SAAQ,SAAAxC,GAAK,OAAIyC,EAAazC,MAClDiC,EAAS,CACP7C,KAAM,wBACNyC,QAASU,EAAazD,cAG3B,IAEH,IA0BM2D,EAAe,SAAAzC,GACnBmC,MAAM,6CAAD,OAA8CnC,EAAM0C,SACtDN,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJvC,EAAME,KAAOqC,EAAarC,KAC1BF,EAAMI,QAAUmC,EAAanC,QAC7BJ,EAAMG,QAAUoC,EAAapC,YAI3BqB,EAAkCG,EAAlCH,OAAQC,EAA0BE,EAA1BF,aAAcF,EAAYI,EAAZJ,QAE9B,OACE,yBAAKpC,UAAU,OACb,kBAAC,EAAD,CAAQU,KAAK,eAAeF,OAxCjB,SAAAV,GACbgD,EAAS,CACP7C,KAAM,0BAGR+C,MAAM,8CAAD,OAC2ClD,IAE7CmD,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAC0B,SAA1BA,EAAaI,UACfJ,EAAazD,OAAO0D,SAAQ,SAAAxC,GAAK,OAAIyC,EAAazC,MAClDiC,EAAS,CACP7C,KAAM,wBACNyC,QAASU,EAAazD,UAGxBmD,EAAS,CACP7C,KAAM,wBACNyC,QAASU,EAAaT,cAsB5B,uBAAG3C,UAAU,aAAb,kCACA,yBAAKA,UAAU,UACZoC,IAAYE,EACX,6CACEA,EACF,yBAAKtC,UAAU,gBAAgBsC,GAE/BD,EAAOnB,KAAI,SAACL,EAAO4C,GAAR,OACT,kBAAC,EAAD,CAAOpC,IAAG,UAAKoC,EAAL,YAAc5C,EAAMC,OAASD,MAAOA,UC1FtC6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.63061c3f.chunk.js","sourcesContent":["import React, {useState} from 'react'\n\nfunction Search(props) {\n  const [searchValue,setSearchValue] = useState('')\n  \n  const handleSearchInputChanges = (e)=> {\n    setSearchValue(e.target.value)\n  }\n  \n  const resetInputField = ()=> setSearchValue('')\n  \n  const callSearchFunction = (e) => {\n    e.preventDefault();\n    props.search(searchValue);\n    resetInputField();\n  }\n  \n  return (\n    <form className=\"search\">\n      <input type=\"text\"\n      onChange={handleSearchInputChanges}\n      value = {searchValue}\n      />\n      <input type=\"submit\" onClick={callSearchFunction} value='SEARCH'/>\n    </form>\n  )\n}\n\nexport default Search","import React from 'react'\nimport Search from './search'\n\nfunction Header(props){\n  return (\n    <header className=\"App-header\">\n      <h1>{props.text}</h1> \n      <Search search={props.search}/>\n    </header>\n  )\n}\n\nexport default Header;\n","import React from 'react'\n\nfunction MoreInfo(props) {\n  const { isHovering, movie } = props\n  \n  return isHovering ? (\n    <div className=\"more-info\">\n      <h3>{movie.Title}</h3>\n      <p>{movie.Plot}</p>\n      <br/>\n      <p>Runtime: {movie.Runtime}</p>\n      {movie.Ratings.map((rating, i) => <p key={`${i}-{}`}>{rating.Source}: {rating.Value}</p>)}\n    </div>\n  ) : null\n}\n\nexport default MoreInfo\n","import React, {useState} from 'react'\n\nimport MoreInfo from './moreInfo'\n\nconst DEFAULT_PLACEHOLDER_IMAGE =\n\"https://lascrucesfilmfest.com/wp-content/uploads/2018/01/no-poster-available-737x1024.jpg\"\n\nfunction Movie ({movie}){\n  const [isHovering, setIsHovering] = useState(false)\n\n  const handleMouseHover = ()=> {\n    setIsHovering(!isHovering)\n  }\n\n  const poster = movie.Poster=== \"N/A\"? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster\n  return (\n    <div \n    className=\"movie\"\n    onMouseEnter={handleMouseHover}\n    onMouseLeave ={handleMouseHover}\n    >\n      <h2>{movie.Title}</h2>\n      <div>\n        <img\n          width=\"200\"\n          alt={`The movie titled: ${movie.Title}`}\n          src={poster}\n        />\n      </div>\n      <p>{movie.Year}</p>\n      <MoreInfo isHovering={isHovering} movie={movie}/>\n    </div>\n  )\n}\n\nexport default Movie","import React, { useReducer, useEffect } from 'react'\nimport './App.css'\nimport Header from './header'\nimport Movie from './movie'\n\nconst MOVIE_API_URL = 'http://www.omdbapi.com/?s=woman&apikey=7b3030fb'\n\nconst initialState = {\n  loading: true,\n  movies: [],\n  errorMessage: null\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'SEARCH_MOVIES_REQUEST':\n      return {\n        ...state,\n        loading: true,\n        errorMessage: null\n      }\n    case 'SEARCH_MOVIES_SUCCESS':\n      return {\n        ...state,\n        loading: false,\n        movies: action.payload\n      }\n    case 'SEARCH_MOVIES_FAILURE':\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.Error\n      }\n    default:\n      return state\n  }\n}\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  useEffect(() => {\n    fetch(MOVIE_API_URL)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        jsonResponse.Search.forEach(movie => getMovieData(movie))\n        dispatch({\n          type: 'SEARCH_MOVIES_SUCCESS',\n          payload: jsonResponse.Search\n        })\n      })\n  }, [])\n\n  const search = searchValue => {\n    dispatch({\n      type: 'SEARCH_MOVIES_REQUEST'\n    })\n\n    fetch(\n      `https://www.omdbapi.com/?apikey=7b3030fb&s=${searchValue}`\n    )\n      .then(response => response.json())\n      .then(jsonResponse => {\n        if (jsonResponse.Response === 'True') {\n          jsonResponse.Search.forEach(movie => getMovieData(movie))\n          dispatch({\n            type: 'SEARCH_MOVIES_SUCCESS',\n            payload: jsonResponse.Search\n          })\n        } else {\n          dispatch({\n            type: 'SEARCH_MOVIES_FAILURE',\n            payload: jsonResponse.Error\n          })\n        }\n      })\n    }\n  \n\n  const getMovieData = movie => {\n    fetch(`http://www.omdbapi.com/?apikey=7b3030fb&i=${movie.imdbID}`)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        movie.Plot = jsonResponse.Plot\n        movie.Ratings = jsonResponse.Ratings\n        movie.Runtime = jsonResponse.Runtime\n      })\n  }\n\n  const { movies, errorMessage, loading } = state\n\n  return (\n    <div className=\"App\">\n      <Header text=\"Movie Search\" search={search} />\n      <p className=\"App-intro\">WOOO! React Hooks! And Movies!</p>\n      <div className=\"movies\">\n        {loading && !errorMessage ? (\n          <span>loading ...</span>\n        ) : errorMessage ? (\n          <div className=\"errorMessage\">{errorMessage}</div>\n        ) : (\n          movies.map((movie, index) => (\n            <Movie key={`${index}-${movie.Title}`} movie={movie} />\n          ))\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}